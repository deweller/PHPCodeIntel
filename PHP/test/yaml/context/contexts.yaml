# this is test data for the ContextBuilderTest

####################################
-
    php: "Flower::abc"
    context:
        scope: "static"
        visibility: "public"
        class: "Flower"
        prefix: "abc"

####################################
-
    php: "Flower::"
    context:
        scope: "static"
        visibility: "public"
        class: "Flower"
        prefix: ""

####################################
-
    php: |-
        use Outdoor\Flower;
        Flower::
    context:
        scope: "static"
        visibility: "public"
        class: "Outdoor\\Flower"
        prefix: ""

####################################
-
    php: |-
        use Outdoor\Flower;
        Flower::abc
    context:
        scope: "static"
        visibility: "public"
        class: "Outdoor\\Flower"
        prefix: "abc"

####################################
-
    php: |-
        use Outdoor\Flower;
        $a = new Flower();
        $a->abc
    context:
        scope: "instance"
        visibility: "public"
        variable: "$a"
        prefix: "abc"
        class: "Outdoor\\Flower"

####################################
-
    php: |-
        $a = new Flower();
        $a->abc
    context:
        scope: "instance"
        visibility: "public"
        variable: "$a"
        prefix: "abc"
        class: "Flower"

####################################
-
    php: |-
        $a = new Flower();
        $a->
    context:
        scope: "instance"
        visibility: "public"
        variable: "$a"
        prefix: ""
        class: "Flower"

####################################
-
    php: |-
        $a = new Flower();
        $a->
    context:
        scope: "instance"
        visibility: "public"
        variable: "$a"
        prefix: ""
        class: "Flower"

####################################
-
    php: |-
        $a = new Plant();
        $a = new Flower();
        $a->
    context:
        scope: "instance"
        visibility: "public"
        variable: "$a"
        prefix: ""
        class: "Flower"

####################################
-
    php: |-
        use Acme\Flower;
        $a = new Flower();
        $a->
    context:
        scope: "instance"
        visibility: "public"
        variable: "$a"
        prefix: ""
        class: "Acme\\Flower"

####################################
-
    php: |-
        use Acme\Flower;
        $a = new Flower();
        $a->
        $a = new Plant();
        $a->

    posPrefix: $a-> # end at first $a->
    context:
        scope: "instance"
        visibility: "public"
        variable: "$a"
        prefix: ""
        class: "Acme\\Flower"

####################################
-
    php: |-
        class MyClass {
            public function myMethod() {
                $this->pre;
            }
        }

    posPrefix: $this->pre
    context:
        scope: "instance"
        visibility: "private"
        variable: "$this"
        prefix: "pre"
        class: "MyClass"

####################################
-
    php: |-
        class NotMyClass { function a() {} }
        class MyClass {
            public function myMethod() {
                $this->pre;
            }
        }

    posPrefix: "$this->pre"
    context:
        scope: "instance"
        visibility: "private"
        variable: "$this"
        prefix: "pre"
        class: "MyClass"

####################################
-
    php: |-
        class MyClass {
            static function a() {
                MyClass::b
            }
        }

    posPrefix: "MyClass::b"
    context:
        scope: "static"
        visibility: "private"
        prefix: "b"
        class: "MyClass"

####################################
-
    php: |-
        class NotMyClass { function a() {} }
        Something::x

    posPrefix: "Something::x"
    context:
        scope: "static"
        visibility: "public"
        prefix: "x"
        class: "Something"

####################################
-
    php: |-
        class MyClass {
            public function myMethod(Flower $a) {
                $a->pre;
            }
        }
    posPrefix: "$a->pre"
    context:
        scope: "instance"
        visibility: "public"
        variable: "$a"
        prefix: "pre"
        class: "Flower"

####################################
-
    php: |-
        class MyClass {
            public function myMethod(Flower $a) {
                testCall($a);
                $a->pre;
            }
        }
    posPrefix: "$a->pre"
    context:
        scope: "instance"
        visibility: "public"
        variable: "$a"
        prefix: "pre"
        class: "Flower"

####################################
-
    php: |-
        namespace Outdoor;
        class Flower {
            function a() {
                self::abc
            }
        }
    posPrefix: "self::abc"
    context:
        scope: "static"
        visibility: "private"
        prefix: "abc"
        class: "Outdoor\\Flower"

####################################
-
    php: |-
        namespace Outdoor;
        class Flower {
            function a() {
                self::
            }
        }
    posPrefix: "self::"
    context:
        scope: "static"
        visibility: "private"
        prefix: ""
        class: "Outdoor\\Flower"

####################################
-
    php: "$f = new Flower"
    context:
        entityType: "constructor"
        visibility: "public"
        prefix: "Flower"

####################################
-
    php: "Flower"
    context:
        entityType: "className"
        visibility: "public"
        prefix: "Flower"

####################################
-
    php: "$a=0;Flower"
    context:
        entityType: "className"
        visibility: "public"
        prefix: "Flower"
